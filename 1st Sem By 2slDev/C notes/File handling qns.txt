1. Program to write text in a file.(word and sentence. Both fputs and fprintf will work properly).
2. Program to read text from a file. (word and sentence)
3. Program to write array in a file.
4. Program to read array from a file.
5. Program to write a structure in a file.
6. Program to read a structure from a file.


1. Program to write text in a file.

	a. word. (Batman)// (since this is a word, we can do it by using
				fprintf,fputs)
	b. Sentence. (Batman is from DC comics) // (since this is a sentence
						     we use fprintf,fputs)
						    
----------------------------------------------------------------
1 a. (fprintf)

#include<stdio.h>
#include<stdlib.h>
#include<conio.h>

void main()
{
	char x[]="BATMAN";
	File *p;
	p=fopen("abc.txt","w+");
	if(p==NULL)
	{
		printf("Error! file is not opened");
		exit(0);
	}
	fprintf(p,"%s",x);
	getch();
}

1 b. (fputs)

#include<stdio.h>
#include<stdlib.h>
#include<conio.h>

void main()
{
	char x[]="Batman";
	File *p;
	p=fopen("abc.txt","w+");
	if(p==NULL)
	{
		printf("Error! file is not opened");
		exit(0);
	}
	fputs(x,p);
	fclose(p);
	getch();
}
	
-----------------------------------------------------------------------------------------------------
2. Program to read text from a file.

	a. word. (Batman)// (since this is a word, we can do it by using 
				fscanf and fgets both)
	b. Sentence. (Batman is from DC comics) // (since this is a sentence
						     we use fgets)


2 a. (fscanf)
	#include<stdio.h>
	#include<stdlib.h>
	#include<conio.h>
	
	void main()
	{
		char x[7];
		FILE *p;
		p=fopen("mansan3.txt","r");
		if(p==NULL)
		{
			printf("Error! File couldnot be opened");
			exit(0);
		}
		fscanf(p,"%s",x);
		printf("\n The word in the file was %s",x);

		fclose(p);
		getch();
}

2 b. (fgets)


	#include<stdio.h>
	#include<stdlib.h>
	#include<conio.h>
	
	void main()
	{
		char x[25];
		FILE *p;
		p=fopen("mansan3.txt","r");  //Flash is a superhero=sentence is in mansan.txt.
		if(p==NULL)
		{
			printf("Error! File couldnot be opened");
			exit(0);
		}

		if(fgets(x,25,p)!=NULL)

		{
			puts(x);
		}

 		//(Do whatever you want to do with the sentence which is stored in array named: x)
		

		fclose(p);
		getch();
	}

----------------------------------------------------------------------------------------------------------------------


3. Program to write array in a file.	


a. int x[5]; // an integer based array which can store 5 numbers.	
b. get values in array x.
c. Write array x in file "abc.txt".


#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

void main()
{

	int x[5],i=0;
	FILE *p;
	p=fopen("mansan3.txt","w+");
	if(p==NULL)
	{
		printf("\n Error! File not opened");
		exit(0);
	}
	for(i=0;i<5;i++)
	{
		printf("Enter %d value",i+1);
		scanf("%d",&x[i]);
		fprintf(p,"%d ",x[i]);
	}

	fclose(p);
	getch();
}
		
	
-----------------------------------------------------------------------------------
4. Program to read array from a file.


a. you need to have an empty array. (int x[5];)
b. Scan data from the file and put it in the empty array which you have declared already.	
	Scan->mansan3.txt, get the values and store it in array x.
c. display array x or do whatever you want to do with array x.



#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

void main()
{
	int x[10],i=0;
	FILE *p;
	clrscr();
	p=fopen("C:\\mansan3.txt","r");
	if(p==NULL)
	{
		printf("\n Error! File not opened");
		exit(0);
	}

	for(i=0;i<10;i++)  //i=0,1,2,3,4
	{
	    fscanf(p,"%d ",&x[i]);

	}
	printf("\n THe value in the file were:");
	for(i=0;i<10;i++)
	{
		printf("%d ",x[i]);


	}

	fclose(p);
	getch();

}

----------------------------------------------------------------------------

5. Program to write a structure in a file.

-> In order to write structure in a file, we use fwrite() command.


 fwrite():
--------------

 Syntax:
           fwrite(ptr, int size, int n, FILE *fp);

ptr : ptr is the reference of an array or a structure stored in memory.
      // it is address of structure which you are about to write in the file.
size : size is the total number of bytes to be written.
	// size of structure which we are about to write in the file.

n : n is number of times a record will be written.

FILE* : FILE* is a file where the records will be written in binary mode.


example program:

a. using a structure based variable to input structure in a file.

#include<stdio.h>

       struct Student
       {
              int roll; 
              char name[25];
              int marks;
       };

       void main()
       {
              FILE *fp;
              char ch;
      
	      struct Student Stu;

              fp = fopen("student.dat","r+");    

              if(fp == NULL)
              {
                     printf("\nCan't open file or file doesn't exist.");
                     exit(0);
              }
             

	do 
              {
                      printf("\nEnter Roll : ");
                      scanf("%d",&Stu.roll); //2

                      printf("Enter Name : ");
                      scanf("%s",Stu.name);  //shyam

                      printf("Enter Marks : ");
                      scanf("%d",&Stu.marks);  //40

                      fwrite(&Stu,sizeof(Stu),1,fp);

                printf("\nDo you want to add another data (y/n) : ");
                      ch = getche(); //getche() takes one character input;

              }while(ch=='y' || ch=='Y'); 

              printf("\nData written successfully...");

              fclose(fp);
       }


b. Using structure based array to input structure in a file.

#include<stdio.h>

       struct Student
       {
              int roll; 
              char name[25];
              int marks;
       };

       void main()
       {
              FILE *fp;
              int i=0;
      
	      struct Student Stu[5];

              fp = fopen("student.dat","r+");    

              if(fp == NULL)
              {
                     printf("\nCan't open file or file doesn't exist.");
                     exit(0);
              }
             

	for(i=0;i<5;i++)
	{
       	 	      printf("\nEnter Roll : ");
                      scanf("%d",&Stu[i].roll); 

                      printf("Enter Name : ");
                      scanf("%s",Stu[i].name);  

                      printf("Enter Marks : ");
                      scanf("%d",&Stu[i].marks);  
	}
      

	 fwrite(&Stu,sizeof(Stu),1,fp);

              

              printf("\nData written successfully...");

              fclose(fp);
       }

----------------------------------------------------------------------------


6. Program to read a structure from a file. 

-> fread() command is used to read a structure from a file.
 

 syntax:
     fread( ptr, int size, int n, FILE *fp );


ptr : ptr is the reference of an array or a structure stored in memory.
      // it is address of structure where you have read data  from the file.
size : size is the total number of bytes which have been read.
	// size of structure which we read from the file.

n : n is number of times a record will be read.

FILE* : FILE* is a file where the records will be read in binary mode.
   
example:

a. reading structure from file by using variable of structure.
 #include<stdio.h>

       struct Student
       {
              int roll;
              char name[25];
              int marks;
       };

       void main()
       {
              FILE *fp;
              char ch;
              struct Student Stu; // stu.roll,stu.name,stu.marks

              fp = fopen("Student.dat","r");            //Statement   1

              if(fp == NULL)
              {
                     printf("\nCan't open file or file doesn't exist.");
                     exit(0);
              }

              printf("\n\tRoll\tName\tMarks\n");

        while(fread(&Stu,sizeof(Stu),1,fp)>0) //stu.roll=5,stu.name=y,stu.marks=10

                  printf("\n\t%d\t%s\t%d",Stu.roll,Stu.name,Stu.marks);

              fclose(fp);
       }

b. reading structure from file by using array of structure.

 #include<stdio.h>

       struct Student
       {
	      int roll;
	      char name[25];
	      int marks;
       };

       void main()
       {
	      FILE *fp;
	      char ch;
	      int i=0;
	      struct Student stu[3],test[3]; // structure's variable.
	      clrscr();
	      fp = fopen("C:\\TURBOC3\\student.dat","w+"); //Statement   1

	      if(fp == NULL)
	      {
		     printf("\nCan't open file or file doesn't exist.");
		     exit(0);
	      }

	      for(i=0;i<3;i++)
	      {
			printf("\nEnter roll");
			scanf("%d",&stu[i].roll);
			fflush(stdin);
			printf("\n Enter name");
			scanf("%s",stu[i].name);
			fflush(stdin);
			printf("\nEnter marks");
			scanf("%d",&stu[i].marks);
			fflush(stdin);
	      }
	      fwrite(&stu,sizeof(stu),1,fp);
	      fclose(fp);
	      fp = fopen("C:\\TURBOC3\\student.dat","r"); //Statement   1

	      if(fp == NULL)
	      {
		     printf("\nCan't open file or file doesn't exist.");
		     exit(0);
	      }
	      fread(&test,sizeof(test),1,fp);
	      printf("\n The structures in the file were:\n");
	      for(i=0;i<3;i++)
	      {

	      printf ("\n %d \t%s \t%d",test[i].id,test[i].name,test[i].marks);
               
	      }


	      getch();
       }

-------------------------------------------------------------------
Student Mgmt System:


	MENU

1. Add student record.
2. Dislpay Student record.
3. Search student.
4. Modify records of student.
5. Delete record.
5. exit.

.....................................................................

WAP to count no of times a particular letter has occured in the file.


WAP to count no of line in a file.

WAP to count no of vowel and constant in the file.


getc command :  //get character.


example: https://www.geeksforgeeks.org/c-program-count-number-lines-file/

WAP to find how many times vowels have occured in a file.



syntax:  

	return variable=getc(file pointer)
	c=getc(fp); //get character from file which is being pointed by fp pointer
		    // and load it in variable c.

for (c = getc(fp); c != EOF; c = getc(fp)) //i
{
	if(c=='a')
	{
		acount++;  //1

	}

	if(c=='e')
	{
		ecount++;  //1

	}

}

----------------------------------------------------------------------------

Extra topic for reference purpose while using switch case:

( How to reiterate menu in C without using while loop)

#include<stdio.h>
#include<stdlib.h>


void main()
{

// variable declare.
rambo:
	menu print;


switch(case)
{
	case 1:
			
		break;
	case 2:
		break;
	...

        ....


	case 5:
		printf("Do you really want to exit? Press y or n");
		ch=getche();
		if(ch=='y'||ch=='Y')
		{
			exit(0);
		}
		else
			goto rambo;

}



































































































		